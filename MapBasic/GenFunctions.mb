'* DataExtractor is a MapInfo tool to extract biodiversity information
'* from SQL Server and MapInfo GIS layer for pre-defined spatial areas.
'*
'* Copyright © 2013, 2015 Greenspace Information for Greater London (GiGL)
'* Copyright © 2015 Andy Foy Consulting
'* Copyright © 2020 GiGL
'* 
'* This file is part of the MapInfo tool 'DataExtractor'.
'* 
'* DataExtractor is free software: you can redistribute it and/or modify
'* it under the terms of the GNU General Public License as published by
'* the Free Software Foundation, either version 3 of the License, or
'* (at your option) any later version.
'* 
'* DataExtractor is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'* 
'* You should have received a copy of the GNU General Public License
'* along with DataExtractor.  If not, see <http://www.gnu.org/licenses/>.
'*
'***************************************************************
'* GenFunctions v1.43
'*
'* Contains general functions used by the DataExtractor tool.
'*
'*
'* Created:			Andy Foy - February 2013
'* Last revised:	Andy Foy - May 2019
'* 
'* *****************  Version 1.43  *****************
'* Author: Andy Foy		Date: 28/05/2019
'* A. Added function to get a list of files from a directory.
'* 
'* *****************  Version 1.42  *****************
'* Author: Andy Foy		Date: 11/09/2015
'* A. Added function to check existence of column in
'*    table.
'* 
'* *****************  Version 1.41  *****************
'* Author: Andy Foy		Date: 08/06/2015
'* A. Added functions to return userid, find and replace
'*    a string, and get the length of a whole table row.
'* 
'* *****************  Version 1.40  *****************
'* Author: Andy Foy		Date: 01/04/2015
'* A. Initial version of code based on Data Extractor tool.
'* 
'***************************************************************
Include "DataExtractor.def"

Function TableIsOpen (ByVal sTabName As String) As Logical
'*************************************************
'* Check if the table is open
'*************************************************

	'-------------------------------------------------
	' Determine the number of open tables
	'-------------------------------------------------
	Dim iCounter, iNumberOfTables As Integer
	iNumberOfTables = NumTables()

	'-------------------------------------------------
	' Return FALSE if there are no open tables
	'-------------------------------------------------
	If iNumberOfTables = 0 Then
		TableIsOpen = FALSE
		Exit Function
	End If

	'-------------------------------------------------
	' Loop through the open tables looking for the
	' require table name. If found return TRUE
	'-------------------------------------------------
	For iCounter = 1 to iNumberOfTables
		If TableInfo(iCounter, TAB_INFO_NAME) = sTabName Then
			TableIsOpen = TRUE
			Exit Function
		End If
	Next

End Function

Function ColumnExists(ByVal sTableName As String, ByVal sColName As String) As Logical
'*************************************************
'* Check if the column exists in the table
'*************************************************

	'-------------------------------------------------
	' Loop through all the columns looking for the
	' required name
	'-------------------------------------------------
	Dim i, j As Integer
	Dim sColName0 As String

	ColumnExists = False

	For i = 1 to TableInfo(sTableName, TAB_INFO_NCOLS)
 
       sColName0 = ColumnInfo(sTableName, "col"&i, COL_INFO_NAME)
		If UCase$(sColName) = UCase$(sColName0) Then
 			ColumnExists = True
			Exit For
		End If

	Next

End Function

Function ExecuteAndWait(ByVal cmdLine as string) As Integer
'*************************************************
'* Execute a command and wait for it to finish
'*************************************************

	OnError Goto ErrorHandle

	Dim nRetVal As Integer, nExitCode As Integer
	Dim NameOfProc As Process_Information, NameStart As StartUpInfo
	Dim hProc As Integer

	NameStart.cb = 256
	NameStart.dwFlags = 1
	NameStart.wShowWindow = 0

	' Start the shelled application
	nRetVal = CreateProcessA(0, cmdLine, 0, 0, 1, NORMAL_PRIORITY_CLASS, 0, 0, NameStart, NameOfProc)

	' Get the handle of the started process
	hProc = NameOfProc.hProcess

	' Wait for the shelled application process to finish
	nRetVal = WaitForSingleObject(hProc, INFINITE)

	' Get the exit code from the shelled application
	nRetVal = GetExitCodeProcess(hProc, nExitCode)

	' Close the process handle
	nRetVal = CloseHandle(hProc)

	ExecuteAndWait = nExitCode

Exit Function

ErrorHandle:
	ExecuteAndWait = FALSE
	Note str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Function

End Function

Function ZipFiles(sDefaultPath As String, sShortName As String) As Integer
'*************************************************
'* Zip all the files in the specified folder
'*************************************************

	Call MyPrint("Zipping the extract files ...")

	'-------------------------------------------------
	' Delete the zip file from the partner's subfolder
	' if it already exists
	'-------------------------------------------------
	If FileExists(sDefaultPath + "\" + sShortName + "\" + sShortName + ".zip") Then
		Call MyPrint("Deleting the existing zip file ...")
		Kill sDefaultPath + "\" + sShortName + "\" + sShortName + ".zip"
	End If

	'-------------------------------------------------
	' Create the zip command string
	'-------------------------------------------------
	Dim sZipCommand as string
	sZipCommand = "CScript.exe " +
		chr$(34) + ApplicationDirectory$() + "zip.vbs" + chr$(34) + " " + 
		chr$(34) + sDefaultPath + "\" + sShortName + chr$(34) + " " + 
		chr$(34) + sDefaultPath + "\" + sShortName + ".zip" + chr$(34) + " " + 
		"MOVE"

	'-------------------------------------------------
	' Execute the command and wait for it to finish
	'-------------------------------------------------
	Dim iZipSuccess As Integer
	iZipSuccess = ExecuteAndWait(sZipCommand)
	If iZipSuccess = 9 Then
		Call MyPrint("Error creating zip file - process interupted by user.")
		ZipFiles = iZipSuccess
		Exit Sub
	Else
		If iZipSuccess = 1 then
			Call MyPrint("No files to compress - zip process terminated.")
			ZipFiles = iZipSuccess
			Exit Sub
		Else
			If iZipSuccess > 0 then
				Call MyPrint("Error creating zip file - process terminated.")
				ZipFiles = iZipSuccess
				Exit Sub
			End if
		End If
	End if

	'-------------------------------------------------
	' Move zip file to the partner's subfolder
	'-------------------------------------------------
	Call MyPrint("Moving the zip file ...")

	Dim sOldFile, sNewFile As String
	sOldFile = sDefaultPath + "\" + sShortName + ".zip"
	sNewFile = sDefaultPath + "\" + sShortName + "\" + sShortName + ".zip"
	If MoveFile(sOldFile, sNewFile) = 0 then
		Call MyPrint("Error moving zip file - process terminated.")
		Call MyPrint("")
		ZipFiles = 99
		Exit Sub
	End if	

	ZipFiles = 0

End Function

Function STLText2Symbol(ByVal sSymbol As String) As Symbol
'*************************************************
'* Convert style text string to symbol
'*************************************************
Dim arrItems() As String, nNumItems As Integer
OnError GoTo ErrorOccured

nNumItems = StringSplit(sSymbol, ",", arrItems)

If nNumItems = 3 Then
	'MapInfo 3.0 symbol set
	STLText2Symbol = MakeSymbol(Val(arrItems(1)), Val(arrItems(2)), Val(arrItems(3)))
ElseIf nNumItems > 3 Then
	Do Case arrItems(1)
		Case "1"
			'MapInfo 3.0 symbol set
			STLText2Symbol = MakeSymbol(Val(arrItems(2)), Val(arrItems(3)), Val(arrItems(4)))
		Case "2"
			'TrueType font as the symbol
			STLText2Symbol = MakeFontSymbol(Val(arrItems(2)), Val(arrItems(3)), Val(arrItems(4)), arrItems(5), Val(arrItems(6)), Val(arrItems(7)))
		Case "3"
			'Symbol value based on a bitmap file
			STLText2Symbol = MakeCustomSymbol(arrItems(2), Val(arrItems(3)), Val(arrItems(4)), Val(arrItems(5)))
	End Case
End If

Exit Function
'-------------------------
ErrorOccured:
	STLText2Symbol = CurrentSymbol()
End Function

Function STLText2Pen(ByVal sSymbol As String) As Pen
'*************************************************
'* Convert style text string to pen
'*************************************************
Dim arrItems() As String, nNumItems As Integer
OnError GoTo ErrorOccured

nNumItems = StringSplit(sSymbol, ",", arrItems)

If nNumItems = 3 Then
	STLText2Pen = MakePen(Val(arrItems(1)), Val(arrItems(2)), Val(arrItems(3)))
End If

Exit Function
'-------------------------
ErrorOccured:
	STLText2Pen = CurrentPen()
End Function

Function STLText2Brush(ByVal sSymbol As String) As Brush
'*************************************************
'* Convert style text string to brush
'*************************************************
Dim arrItems() As String, nNumItems As Integer
OnError GoTo ErrorOccured

nNumItems = StringSplit(sSymbol, ",", arrItems)

If nNumItems = 2 Then
	STLText2Brush = MakeBrush(Val(arrItems(1)), Val(arrItems(2)), -1)
ElseIf nNumItems = 3 Then
	STLText2Brush = MakeBrush(Val(arrItems(1)), Val(arrItems(2)), Val(arrItems(3)))
End If

Exit Function
'-------------------------
ErrorOccured:
	STLText2Brush = CurrentBrush()
End Function

Function StringSplit(ByVal sText As String, ByVal sSplitChar As String, arrParts() As String) As Integer
'*************************************************
'* Splits a comma delimeted string into separate
'* values in an array
'*************************************************
	Dim sCopy As String, nBeg, nEnd As Integer, nCount As Integer 
	OnError GoTo ErrorOccured 
	nEnd = 0 
	nCount = 0 
	sCopy = UCase$(sText) 
	
	Do While nEnd <= Len(sCopy) 
		nBeg = nEnd + 1 
		nEnd = InStr(nBeg, sCopy, sSplitChar) 
		If nEnd = 0 Then 
			nEnd = Len(sCopy) + 1 
		End If 
		nCount = nCount + 1 
		ReDim arrParts(nCount) 
		If nBeg = nEnd Then 
			arrParts(nCount) = "" 
		Else 
			arrParts(nCount) = Mid$(sText, nBeg, nEnd - nBeg) 
		End If 
	Loop 
	STRINGSplit = nCount 

	Exit Function 
'------------------------- 
ErrorOccured: 
End Function

Function StringReplace(ByVal sToBeSearched As String, ByVal sSearchFor As String, ByVal sReplaceWith As String) As String
'*************************************************
'* Finds and replaces one string with another
'* in a given string
'*************************************************

Dim i, nLenR, nLenS As Integer
OnError GoTo ErrorOccured

STRINGReplace = sToBeSearched

nLenR = Len(sReplaceWith)
nLenS = Len(sSearchFor)
i = InStr(1, sToBeSearched, sSearchFor)
Do While i > 0
   sToBeSearched = Left$(sToBeSearched,i - 1) + sReplaceWith
               + Right$(sToBeSearched, Len(sToBeSearched) - ((i - 1) + nLenS))
   i = InStr(i + nLenR, sToBeSearched, sSearchFor)
Loop
STRINGReplace = sToBeSearched

Exit Function

'-------------------------
ErrorOccured:

End Function

Function GetRowLength(ByVal sTableName As String) As Integer
'*************************************************
'* Calculate the total row length for a table
'*************************************************

	'-------------------------------------------------
	' Loop through all the columns in the table and
	' sum the column lengths
	'-------------------------------------------------
	Dim i As Integer
	Dim iRowLength As Integer
	Dim iColumnType As SmallInt
	iRowLength = 1

	For i = 1 to TableInfo(sTableName, TAB_INFO_NCOLS)
 
       iColumnType = ColumnInfo(sTableName, "col"&i, COL_INFO_TYPE)

		Do Case iColumnType
			Case 1
				iRowLength = iRowLength + ColumnInfo(sTableName, "col"&i, COL_INFO_WIDTH)
			Case 2
				iRowLength = iRowLength + ColumnInfo(sTableName, "col"&i, COL_INFO_WIDTH)
			Case 3
				iRowLength = iRowLength + 4
			Case 4
				iRowLength = iRowLength + 2
			Case 5
				iRowLength = iRowLength + 4
			Case 6
				iRowLength = iRowLength + 1
			Case 8
				iRowLength = iRowLength + 8
			Case 37
				iRowLength = iRowLength + 4
			Case 38
				iRowLength = iRowLength + 8
			Case Else
				Call MyPrint("Column type " + iColumnType + " unrecognised.  Column length unknown")
		End Case

	Next

	GetRowLength = iRowLength

End Function

Function GetUserID() As String
'*************************************************
'* Get the User ID of the current user
'*************************************************

	'-------------------------------------------------
	' Loop through all the columns in the table and
	' sum the column lengths
	'-------------------------------------------------
	Dim sUserID As String ' receives name of the user
	Dim iLength As Integer ' length of the string
	Dim iRetVal As Integer ' return value

	'-------------------------------------------------
	' Create room in the buffer to receive the returned string
	'-------------------------------------------------
	sUserID = Space$(255)
	iLength = 255

	'-------------------------------------------------
	' Get the user id
	'-------------------------------------------------
	iRetVal = GetUserName(sUserID, iLength)

	'-------------------------------------------------
	' Extract the returned info from the buffer
	'-------------------------------------------------
	sUserID = Left$(sUserID, iLength - 1)

	GetUserID = sUserID

End Function

Function MonthNumToShortName(ByVal iMonthNo As Integer) As String
'*************************************************
'* Converts a month number to a short name
'* eg 3 -> Mar
'*************************************************

	Do Case iMonthNo
		Case 1
			MonthNumToShortName = "Jan"
		Case 2
			MonthNumToShortName = "Feb"
		Case 3
			MonthNumToShortName = "Mar"
		Case 4
			MonthNumToShortName = "Apr"
		Case 5
			MonthNumToShortName = "May"
		Case 6
			MonthNumToShortName = "Jun"
		Case 7
			MonthNumToShortName = "Jul"
		Case 8
			MonthNumToShortName = "Aug"
		Case 9
			MonthNumToShortName = "Sep"
		Case 10
			MonthNumToShortName = "Oct"
		Case 11
			MonthNumToShortName = "Nov"
		Case 12
			MonthNumToShortName = "Dec"
	End Case
	
End Function

Function MonthNumToQuarter(ByVal iMonthNo As Integer) As String
'*************************************************
'* Converts a month number to a financial
'* quarter, eg 3 -> Q4
'*************************************************

	Do Case iMonthNo
		Case 1, 2, 3
			MonthNumToQuarter = "Q4"
		Case 4, 5, 6
			MonthNumToQuarter = "Q1"
		Case 7, 8, 9
			MonthNumToQuarter = "Q2"
		Case 10, 11, 12
			MonthNumToQuarter = "Q3"
	End Case
	
End Function

Function MonthNumToFinancialYear(ByVal iMonthNo As Integer, ByVal iYear As Integer) As String
'*************************************************
'* Converts a month and year to a financial
'* year, eg 3, 2020 -> 19-20
'*************************************************

	Do Case iMonthNo
		Case 1, 2, 3
			MonthNumToFinancialYear = Format$(iYear - 1, "00") + "-" + Format$(iYear, "00")
		Case 4, 5, 6
			MonthNumToFinancialYear = Format$(iYear, "00") + "-" + Format$(iYear + 1, "00")
		Case 7, 8, 9
			MonthNumToFinancialYear = Format$(iYear, "00") + "-" + Format$(iYear + 1, "00")
		Case 10, 11, 12
			MonthNumToFinancialYear = Format$(iYear, "00") + "-" + Format$(iYear + 1, "00")
	End Case
	
End Function

Function GetFileList(ByVal sFilePath as String, ByVal sFileFilter as String, sFileList() as String, sFileExclude As String) as Logical
'*************************************************
'* Get a list of files from a directory
'*************************************************
OnError Goto CatchEx
   
   Dim sFileName as String
   Dim sSubDirFileList() As String

   Dim iReturn as Integer 
   iReturn = 1
   
   Dim i as Integer, j as Integer
   i = 1 

   hFind = FindFirstFile(sFilePath & sFileFilter, wfd)

   sFileName = LTrim$(RTrim$(wfd.cFileName))
   
   If Len(sFileName) > 0 Then

      Do While iReturn <> 0

         If sFileName = "." or sFileName = ".." Then
            iReturn = FindNextFile(hFind, wfd)
            sFileName = LTrim$(RTrim$(wfd.cFileName))
         Else
           	sFileName = LTrim$(RTrim$(wfd.cFileName))
            If wfd.dwFileAttributes = FILE_ATTRIBUTE_DIRECTORY Then
               iReturn = GetFileList(sFilePath & sFileName & "\", sFileFilter, sSubDirFileList(), sFileExclude)
               For j = 1 to Ubound(sSubDirFileList)
                  ReDim sFileList(i)
                  sFileList(i) = sSubDirFileList(j)
                  i = i + 1 
               Next
               iReturn = FindNextFile(hFind, wfd)
            Else
               If UCase$(sFileName) <> UCase$(sFileExclude) Then
                   ReDim sFileList(i)
                   sFileList(i) = Left$(sFileName, Len(sFileName) - Len(sFileFilter) + 1)
	               i = i + 1
	           End If
               iReturn = FindNextFile(hFind, wfd)
            End If
         End If
      Loop
   End If

   iReturn = FindClose(hFind)
   GetFileList = true

Done:
   Exit Sub
CatchEx:
   Note Error$()
   Resume Done
End Function

Public Function GetFileDateTime(ByVal FileName As String,
        ByVal NoGMTConvert As Logical) As String
'*************************************************
' GetFileDateTime
' This function returns the Last Modified date/time
' of the specified file name. It returns "" if an error occurred.
'*************************************************

	Dim FileHandle As Integer
	Dim Res As Integer
	Dim ErrNum As Integer
	Dim ErrText As String
	Dim tCreatedFileTime As FileTime
	Dim tAccessedFileTime As FileTime
	Dim tModifiedFileTime As FileTime
	Dim tLocalTime As FileTime
	Dim tSystemTime As SYSTEMTIME
	Dim ResultTime As String
	Dim secAttr as Integer
	
	' Ensure the file exists.
	If Not FileExists(FileName) Then
	    GetFileDateTime = ""
	    Exit Function
	End If
	
	' Here, we use CreateFile to open the existing file
	' named in FileName.  The OPEN_EXISTING flag indicates
	' that we are opening an existing flag.
	FileHandle = CreateFile(FileName, GENERIC_READ, FILE_SHARE_READ, secAttr, OPEN_EXISTING, 0, 0)
	
	If FileHandle = INVALID_HANDLE_VALUE Then
	    ' An error occurred.
	    GetFileDateTime = ""
	    Exit Function
	End If
	
	' Call the GetFileTime function.
	Res = GetFileTime(
	    FileHandle,
	    tCreatedFileTime,
	    tAccessedFileTime,
	    tModifiedFileTime)
	
	If Res = 0 Then
	    ' An error occurred
	    GetFileDateTime = ""
	    Exit Function
	End If
	
	' Convert the FileTime (GMT) to LocalFileTime)
	' if NoGMTConvert is omitted or False.
	If NoGMTConvert = False Then
	    Res = FileTimeToLocalFileTime(tModifiedFileTime, tLocalTime)
	Else
	    ' We are NOT converting from GMT.
	    tLocalTime.dwHighDateTime = tModifiedFileTime.dwHighDateTime
	    tLocalTime.dwLowDateTime = tModifiedFileTime.dwLowDateTime
	    Res = 2
	End If
	
	If Res = 0 Then
	    ' An error occurred
	    GetFileDateTime = ""
	    Exit Function
	End If
	
	' Convert the FileTime to SystemTime
	Res = FileTimeToSystemTime(tLocalTime, tSystemTime)
	If Res = 0 Then
	    ' An error occurred
	    GetFileDateTime = ""
	    Exit Function
	End If
	
	' Convert from Local to string
	ResultTime = tSystemTime.wYear + Format$(tSystemTime.wMonth, "00") + Format$(tSystemTime.wDay, "00") + "_" +
		Format$(tSystemTime.wHour, "00") + Format$(tSystemTime.wMinute, "00") + Format$(tSystemTime.wSecond, "00")
	
	' Close the file
	Res = CloseHandle(FileHandle)
	
	GetFileDateTime = ResultTime

End Function
